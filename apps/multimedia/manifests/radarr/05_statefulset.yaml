---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: radarr
  namespace: multimedia
  labels:
    app.kubernetes.io/name: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: radarr
  serviceName: radarr
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: radarr
      labels:
        app.kubernetes.io/name: radarr
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Europe/Berlin"
        name: radarr
        image: ghcr.io/linuxserver/radarr:develop
        imagePullPolicy: Always
        ports:
          - containerPort: 7878
            name: http-radarr
        readinessProbe:
          tcpSocket:
            port: http-radarr
          failureThreshold: 5
          timeoutSeconds: 10
        volumeMounts:
          - mountPath: /config
            name: config
          - mountPath: /movies
            name: data
          - mountPath: /download/completed
            name: downloads
        resources:
          requests:
            cpu: 40m
            memory: 635Mi
      - env:
        - name: URL
          value: "http://127.0.0.1:7878"
        - name: PORT
          value: "9707"
        envFrom:
        - secretRef:
            name: radarr-apikey
        name: exportarr
        image: onedr0p/exportarr:v0.3.4
        args: ["radarr"]
        ports:
        - name: metrics
          containerPort: 9707
        readinessProbe:
          httpGet:
            path: /healthz
            port: metrics
          failureThreshold: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 1m
            memory: 11Mi
          limits:
            cpu: 50m
            memory: 100Mi
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: movies
      - name: downloads
        persistentVolumeClaim:
          claimName: torrents
      nodeSelector:
        kubernetes.io/arch: "amd64"
        storage.infra/direct: "true"  # use direct network link for movies volume
      tolerations: []
  volumeClaimTemplates:
  - metadata:
      name: config
      namespace: multimedia
    spec:
      storageClassName: "managed-nfs-storage"
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1201Mi
