---
- hosts: k3s
  become: true
  any_errors_fatal: true
  roles:
    - k3s-prereq
    - k3s-download
  tasks:
    - name: Use legacy iptables on debian systems
      alternatives:
        name: iptables
        path: /usr/sbin/iptables-legacy
      when: ansible_os_family == 'Debian'

- hosts: k3s-master
  become: true
  any_errors_fatal: true
  roles:
    - k3s-master
  tasks:
    - name: Get kube config to deployer host
      fetch:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "{{ playbook_dir }}/kubeconfig"
        flat: true

    - name: Replace localhost with master IP
      become: false
      replace:
        path: "{{ playbook_dir }}/kubeconfig"
        regexp: "127.0.0.1"
        replace: "{{ k3s_master_ip }}"
      delegate_to: localhost

    - name: Import manifests bound to infrastructure
      template:
        src: "{{ item }}"
        dest: "/var/lib/rancher/k3s/server/manifests/{{ item | basename }}"
      with_fileglob: "templates/manifests/*.yaml"

- hosts: k3s-node
  become: true
  serial: 2
  roles:
    - k3s-node
  pre_tasks:
    - name: Install packages needed by PV providers
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ 'nfs-common' if (ansible_os_family | lower == 'debian') else 'nfs-utils' }}"
    - name: Add node labels
      set_fact:
        k3s_extra_agent_args: "{{ k3s_extra_agent_args }} --node-label {{ node_labels | join(' --node-label ') }}"
      when:
        - node_labels is defined
        - node_labels != ""
    - name: Add node taints
      set_fact:
        k3s_extra_agent_args: "{{ k3s_extra_agent_args }} --node-taint {{ node_taints | join(' --node-taint ') }}"
      when:
        - node_taints is defined
        - node_taints != ""
    - name: Check if systemd-resolvd is used
      stat:
        path: /run/systemd/resolve/resolv.conf
      register: resolv
    - name: Use resolv.conf provided by systemd-resolved
      set_fact:
        k3s_extra_agent_args: "{{ k3s_extra_agent_args }} --resolv-conf /run/systemd/resolve/resolv.conf"
      when: resolv.stat.exists
